/* ---------------------------------------------------------------------------------------- */
/*  WRW 17 Feb 2022 - This implements an approximation of MySql FULLTEXT search in C.
    The Sqlite3 implementation of FULLTEXT did not work well. It might be my own doing
    but I couldn't get good results and often outright failure on some input values.
    I explores several approaches as shown in fb_utils.py before implementing this in C.
    Works great.

    Starting point was examples in Python docs:
        https://docs.python.org/3/extending/extending.html

    Called with two strings: data and words. Data is column from the equivalent MySql MATCH( column ).
    Words is value from the equivalent of MySql AGAINST( value ) and is constant over many calls.

    Divide data strings on white space and several other separaters and words string on just white space.
    Put pointers to beginning of divided strings in a list.

    A little optimization by caching words since that changes only once per search whereas data changes
        with every row of table. /// RESUME - removed caching temporarily

    Cheating a little here with fixed size buffers and lists but with a 2:1 safety margin over longest string seen.
    Maybe someday do with dynamic buffer. Overflows are detected and reported with an exception.

    Note: ignore_word are not implemented yet. Maybe never.
*/
/* ---------------------------------------------------------------------------------------- */

#define PY_SSIZE_T_CLEAN
#include <python3.10/Python.h>

static PyObject *MatchError;

#define LIST_SIZE 80         // Maximum number of tokens in data or words.  Saw 38 tokens.
#define BUF_SIZE 500         // Maximum string length for data or words. Saw 254 bytes.

void do_exception();

char * words_list[LIST_SIZE];       // Cache list in global space
char words_buf[ BUF_SIZE ] = "";    // Cache words string in global space
int words_i = 0;                    // Cache len of words_list

/* ---------------------------------------------------------------------------------------- */
// PyArg_ParseTuple second arg: z: str or None, s: str,
//      There are some Nulls at least in the audio_file table, maybe elsewhere when no data.
//      Arrive here as None. Return if so as can't do anything.

static PyObject *
fullword_match( PyObject *self, PyObject *data_args, PyObject *words_args ) {
    const char * data;
    const char * words;

    if (!PyArg_ParseTuple(data_args, "zs", &data, &words )) {       // This gets data and words from fullword_match() args.
        return NULL;
    }

    if( ! data ) {                          // Fields in database can have Null values.
        return PyLong_FromLong( 0 );
    }

    /* ----------------------------------------- */

    char data_buf[ BUF_SIZE ];          // temp data on stack so don't have to worry about free()
    char * data_list[LIST_SIZE];        // also use data_buf for exception messages.

    if( strlen( data ) > BUF_SIZE ) {
        sprintf( data_buf, "Data length exceeds internal limit: %d", BUF_SIZE );
        do_exception( data_buf );
        return NULL;
    }

    // Copy data to buffer

    strcpy( data_buf, data );
    int data_i = 0;

    /* ----------------------------------------- */

    if( strlen( words ) > BUF_SIZE ) {
        sprintf( data_buf, "Words length exceeds internal limit: %d", BUF_SIZE );
        do_exception( data_buf );
        return NULL;
    }

    // Copy words to buffer if not already there.

    int cache_dirty;

    if( strcmp( words, words_buf )) {
        strcpy( words_buf, words );
        words_i = 0;
        cache_dirty = 1;
    } else {
        cache_dirty = 0;
    }

    strcpy( words_buf, words );             // /// TESTING
    cache_dirty = 1;                        // /// TESTING
    words_i = 0;                            // /// TESTING

    /* ----------------------------------------- */

    int i;
    int j;
    char c;
    int ccnt;
    int match;

    /* ----------------------------------------- */
    //  split data on 'space . _ / , ' into list

    ccnt = 0;
    data_list[ data_i++ ] = &data_buf[0];

    for( i = 0; ( c = tolower( data_buf[i] )); i++ ) {
        if( c == ' ' || c == '_' || c == '.' || c == '/' || c == ',' || c == '-' ) {
            data_buf[i] = 0x00;
            if( ccnt ) {                                    // Add to list only if next token is non-zero len.
                data_list[ data_i++ ] = &data_buf[i+1];
                ccnt = 0;
                if( data_i >= LIST_SIZE ) {
                    sprintf( data_buf, "Words token count exceeds internal limit: %d", LIST_SIZE );
                    do_exception( data_buf );
                    return NULL;
                }
            }
        } else {
            data_buf[i] = c;
            ccnt++;
        }
    }

    /* ----------------------------------------- */
    //  Split words on space into list only on new words input. Use cache otherwise.

    if( cache_dirty ) {
        ccnt = 0;
        words_list[ words_i++ ] = &words_buf[0];
    
        for( i = 0; ( c = tolower( words_buf[i] )); i++ ) {
            if( c == ' ') {
                words_buf[i] = 0x00;
                if( ccnt ) {
                    words_list[ words_i++ ] = &words_buf[i+1];
                    ccnt = 0;
                    if( words_i >= LIST_SIZE ) {
                        sprintf( data_buf, "Data token count exceeds internal limit: %d", LIST_SIZE );
                        do_exception( data_buf );
                        return NULL;
                    }
                }
            } else {
                words_buf[i] = c;
                ccnt++;
            }
        }
    }

    /* ----------------------------------------- */
    //  Finally, approximately "MATCH( data ) AGAINST( words ) IN BOOLEAN MODE"

    int matches = 0;

    #ifdef OMIT
        //  This matches word in any order but has issues on duplicate words.
        for( i = 0; (i < words_i); i++ ) {                          // for each token in words (the search value)
            for( j = 0; j < data_i; j++ ) {                         // compare to each token in data (the column value)
                if( ! strcmp( words_list[i], data_list[ j ] )) {    // found word in data, stop looking for word
                    matches++;
                    break;
                }
            }
        }
    #endif

    //  Match in words in order given.
    int next_i = 0;
    for( j = 0; j < data_i; j++ ) {                             // for each token in data (the column value )
        for( i = next_i; (i < words_i); i++ ) {                 // for each token in words (the search value )
            if( ! strcmp( words_list[i], data_list[ j ] )) {    // found word in data, stop looking for word   
                matches++;
                next_i = i + 1;                                 // Start next iteration of words where left off in previous.
                break;
            }
        }
    }

    /* ----------------------------------------- */
    //  All words must match.

    if( words_i == matches ) {                                    
        match = 1;
    } else {
        match = 0;
    }

    /* ----------------------------------------- */

    return PyLong_FromLong( match );
}

/* ---------------------------------------------------------------------------------------- */

void do_exception( char * s ) {
    PyErr_SetString(MatchError, s );
}

/* ---------------------------------------------------------------------------------------- */
//  Must cast fullword_match ( type of PyObject ) to PyCFunction below to suppress compiler warning.
//  *** The method "match" is named here.

static PyMethodDef FullWordMethods[] = {
    {"match", ( PyCFunction ) fullword_match, METH_VARARGS, "Execute a simpliflied equivalent of MySql MATCH( data ) AGAINST( words ) IN BOOLEAN MODE"},
    {NULL, NULL, 0, NULL}        /* Sentinel */
};

/* ---------------------------------------------------------------------------------------- */

static struct PyModuleDef fullwordmodule = {
    PyModuleDef_HEAD_INIT,
    "fullword",             /* name of module. *** The module is named here */
    NULL,                   /* module documentation, may be NULL */
    -1,                     /* size of per-interpreter state of the module,
                               or -1 if the module keeps state in global variables. */
    FullWordMethods
};

/* ---------------------------------------------------------------------------------------- */
//  Don't know what this is all about yet. Have to read more of the documentation.

PyMODINIT_FUNC
PyInit_fullword(void)
{
    PyObject *m;

    m = PyModule_Create( &fullwordmodule );
    if (m == NULL)
        return NULL;

    MatchError = PyErr_NewException( "match.error", NULL, NULL);
    Py_XINCREF(MatchError);
    if (PyModule_AddObject(m, "error", MatchError ) < 0) {
        Py_XDECREF(MatchError);
        Py_CLEAR(MatchError);
        Py_DECREF(m);
        return NULL;
    }
    return m;
}

/* ---------------------------------------------------------------------------------------- */
