/* ---------------------------------------------------------------------------------------- */
/*  WRW 17 Feb 2022 - This implements an approximation of MySql FULLTEXT search in C.
    The Sqlite3 implementation of FULLTEXT did not work well. It might be my own doing
    but I couldn't get good results and often outright failure on some input values.
    I explores several approaches as shown in fb_utils.py before implementing this in C.
    Works great.

    Starting point was examples in Python docs:
        https://docs.python.org/3/extending/extending.html

    Called with two strings: data and words. Data is column from the equivalent MySql MATCH( column ).
    Words is value from the equivalent of MySql AGAINST( value ) and is constant over many calls.

    Divide data strings on white space and several other separaters and words string on just white space.
    Put pointers to beginning of divided strings in a list.

    A little optimization by caching words since that changes only once per search whereas data changes
        with every row of table.                                         

    Cheating a little here with fixed size buffers and lists but with a 2:1 safety margin over longest string seen.
    Maybe someday do with dynamic buffer. Overflows are detected and reported with an exception.

    Note: ignore_word are not implemented yet. Maybe never.

    WRW 2 May 2022 - Rewriting some of this for better clarity. 
        Saved last working version in fullwordmodule.c.pre-2-may-2022-work.
        The #ifdefs were getting to messy, redo this without worrying about going back. Have saved version.
        Major changes: several functions. Break and ignore chars in string instead of if() stmts.
        Use break and ignore chars consistently on both data and words.
        Add cache code to only process words when they change
*/
/* ---------------------------------------------------------------------------------------- */

#define PY_SSIZE_T_CLEAN
#include <python3.10/Python.h>

// #define DEBUG

#ifdef DEBUG
    #include <stdio.h>
#endif

static PyObject *MatchError;
void do_exception();

#define LIST_SIZE 80         // Maximum number of tokens in data or words.  Saw 38 tokens.
#define BUF_SIZE  500        // 500 Maximum string length for data or words. Saw 254 bytes.

char cached_words[ BUF_SIZE ] = "Y";    // Cache copy of original string. words_buf is partioned into separate strings and not suitable for strcmp().
char *words_list[ LIST_SIZE ];          // Cache words list in global space
char words_buf[ BUF_SIZE ] = "X";       // Cache words string in global space. "X" and "Y" needed to fail initial strcmp().
int words_cnt;                          // Global for access on cache hit.

char *ignore_chars = "\"!?()";          // chars ignored in words and data when matching
char *break_chars = "_-/,.";            // words and data are partitioned into separate words on these chars and space.

/* ---------------------------------------------------------------------------------------- */
//  A few functions used for both data and words. Originally inline. Now much cleaner.
/* ---------------------------------------------------------------------------------------- */
//  Return 1 if char c found in string s. Used for testing ignore_chars and break_chars

int char_in_string( char c, char *s ) {
    char x;
    while( (x = *s++) ) {
        if( c == x ) {
            return 1;
        }
    }
    return 0;
}

// ---------------------------------------------------------------------
//  Split 'buf' into separate strings on space boundaries and return
//      list of them in 'list' and count of tokens or -1 on error.

int partition_buffer( char *id, char *buf, char **list ) {
    int count = 0;
    int i;
    char c;

    list[ count++ ] = &buf[0];

    for( i = 0; (c = buf[i]); i++ ) {
        if( c == ' ' ) {
            buf[i] = 0x00;
            list[ count++ ] = &buf[i+1];

            if( count >= LIST_SIZE ) {
                sprintf( buf, "%s token count exceeds internal limit: %d", id, LIST_SIZE );
                do_exception( buf );
                return -1;
            }
        }
    }
    return count;
}

// ---------------------------------------------------------------------
//  Copy 'src' to 'dst' ignoring some some chars, converting others to space.

void copy_to_buffer( const char *src, char *dst ) {
    int prior_c = 0xff;
    int i, j;
    char c;

    for( i=0, j=0; ( c = tolower( src[i] )); i++ ) {
        if( char_in_string( c, ignore_chars )) continue;    // Ignore ignore_chars
        if( char_in_string( c, break_chars )) c = ' ';      // Translate break_chars to space
        if( c == ' ' && j == 0 ) continue;                  // Ignore leading space
        if( c == ' ' && c == prior_c ) continue;            // Collapse successive spaces to one.
        dst[ j++ ] = c;
        prior_c = c;
    }
    if( j > 0 && dst[ j-1 ] == ' ' ) {
        dst[ j-1 ] = 0x00;                 // Remove possible trailing space residual from collapsing multiple trailing spaces.
    } else {
        dst[ j ] = 0x00;                   // Terminate output string
    }
}

// ---------------------------------------------------------------------
// PyArg_ParseTuple second arg: z: str or None, s: str,
//      There are some Nulls at least in the audio_file table, maybe elsewhere when no data.
//      Arrive here as None. Return if so as can't do anything.

static PyObject *
fullword_match( PyObject *self, PyObject *data_args, PyObject *words_args ) {
    const char * data;
    const char * words;

    if (!PyArg_ParseTuple(data_args, "zs", &data, &words )) {       // This gets data and words from fullword_match() args.
        return NULL;
    }

    if( ! data ) {                          // Fields in database can have Null values.
        return PyLong_FromLong( 0 );
    }

    // ---------------------------------------------------------------------

    char data_buf[ BUF_SIZE ];          // temp data on stack so don't have to worry about free() if malloc()ed.
    char *data_list[LIST_SIZE];         // also use data_buf for exception messages.

    if( strlen( data ) > BUF_SIZE ) {
        sprintf( data_buf, "Data length exceeds internal limit: %d", BUF_SIZE );
        do_exception( data_buf );
        return NULL;
    }

    if( strlen( words ) > BUF_SIZE ) {
        sprintf( data_buf, "Words length exceeds internal limit: %d", BUF_SIZE );
        do_exception( data_buf );
        return NULL;
    }

    // -----------------------------------------------------------------
    //  Only copy_to_buffer() and partition_buffer() when words change.

    if( strcmp( words, cached_words )) {        // This strcmp() and strcpy() should be faster than
        strcpy( cached_words, words );          // copy_to_buffer() and partition_buffer() on each iteration.

        copy_to_buffer( words, words_buf );
        words_cnt = partition_buffer( "Words", words_buf, words_list );         //  Split words on space into list
        if( words_cnt < 0 ) {
            return NULL;
        }
    }       

    int data_cnt;

    copy_to_buffer( data, data_buf );
    data_cnt = partition_buffer( "Data", data_buf, data_list );            //  Split data on space into list
    if( data_cnt < 0 ) {
        return NULL;
    }

    // -----------------------------------------------------------------
    //  Diagnostics

    #ifdef DEBUG
        setbuf(stdout, NULL);
        printf( "--------------------\n" );
        printf( "/// data: '%s'\n", data );
        printf( "/// data_buf: '%s'\n", data_buf );

        printf( "/// words: '%s'\n", words );
        printf( "/// words_buf: '%s'\n", words_buf );
        {
            int i;
            for( i = 0; (i < words_cnt); i++ ) {                          // for each token in words (the search value)
                printf( "words from list: '%s'\n", words_list[i] );
            }

            for( i = 0; (i < data_cnt); i++ ) {                          // for each token in words (the search value)
                printf( "data from list: '%s'\n", data_list[i] );
            }
            printf( "\n" );
        }
    #endif

    // -----------------------------------------------------------------
    //  Finally, approximate "MATCH( data ) AGAINST( words ) IN BOOLEAN MODE" from mysql.
    //  Match in words in order given.

    int i;
    int j;
    int next_i = 0;
    int match;
    int matches = 0;

    for( j = 0; j < data_cnt; j++ ) {                           // for each token in data (the column value )
        for( i = next_i; (i < words_cnt); i++ ) {               // for each token in words (the search value )
            if( ! strcmp( words_list[i], data_list[j] )) {      // found word in data, stop looking for word
                matches++;
                next_i = i + 1;                                 // Start next iteration of words where left off in previous.
                break;
            }
        }
    }

    /* ----------------------------------------- */
    //  All words must match.

    if( words_cnt == matches ) {
        match = 1;
    } else {
        match = 0;
    }

    /* ----------------------------------------- */

    return PyLong_FromLong( match );
}

/* ---------------------------------------------------------------------------------------- */

void do_exception( char * s ) {
    PyErr_SetString(MatchError, s );
}

/* ---------------------------------------------------------------------------------------- */
//  Must cast fullword_match ( type of PyObject ) to PyCFunction below to suppress compiler warning.
//  *** The method "match" is named here.

static PyMethodDef FullWordMethods[] = {
    {"match", ( PyCFunction ) fullword_match, METH_VARARGS, "Execute a simpliflied equivalent of MySql MATCH( data ) AGAINST( words ) IN BOOLEAN MODE"},
    {NULL, NULL, 0, NULL}        /* Sentinel */
};

/* ---------------------------------------------------------------------------------------- */

static struct PyModuleDef fullwordmodule = {
    PyModuleDef_HEAD_INIT,
    "fullword",             /* name of module. *** The module is named here */
    NULL,                   /* module documentation, may be NULL */
    -1,                     /* size of per-interpreter state of the module,
                               or -1 if the module keeps state in global variables. */
    FullWordMethods
};

/* ---------------------------------------------------------------------------------------- */
//  Don't know what this is all about yet. Have to read more of the documentation.

PyMODINIT_FUNC
PyInit_fullword(void)
{
    PyObject *m;

    m = PyModule_Create( &fullwordmodule );
    if (m == NULL)
        return NULL;

    MatchError = PyErr_NewException( "match.error", NULL, NULL);
    Py_XINCREF(MatchError);
    if (PyModule_AddObject(m, "error", MatchError ) < 0) {
        Py_XDECREF(MatchError);
        Py_CLEAR(MatchError);
        Py_DECREF(m);
        return NULL;
    }
    return m;
}

/* ---------------------------------------------------------------------------------------- */
